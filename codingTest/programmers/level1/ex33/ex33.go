// 명예의 전당 (1)
// 문제 설명
// "명예의 전당"이라는 TV 프로그램에서는 매일 1명의 가수가 노래를 부르고, 시청자들의 문자 투표수로 가수에게 점수를 부여합니다.
//  매일 출연한 가수의 점수가 지금까지 출연 가수들의 점수 중 상위 k번째 이내이면 해당 가수의 점수를 명예의 전당이라는 목록에 올려 기념합니다.
//  즉 프로그램 시작 이후 초기에 k일까지는 모든 출연 가수의 점수가 명예의 전당에 오르게 됩니다.
//  k일 다음부터는 출연 가수의 점수가 기존의 명예의 전당 목록의 k번째 순위의 가수 점수보다 더 높으면,
//  출연 가수의 점수가 명예의 전당에 오르게 되고 기존의 k번째 순위의 점수는 명예의 전당에서 내려오게 됩니다.

// 이 프로그램에서는 매일 "명예의 전당"의 최하위 점수를 발표합니다. 예를 들어, k = 3이고,
// 7일 동안 진행된 가수의 점수가 [10, 100, 20, 150, 1, 100, 200]이라면, 명예의 전당에서 발표된 점수는 아래의 그림과 같이 [10, 10, 10, 20, 20, 100, 100]입니다.

// 명예의 전당 목록의 점수의 개수 k, 1일부터 마지막 날까지 출연한 가수들의 점수인 score가 주어졌을 때, 매일 발표된 명예의 전당의 최하위 점수를 return하는 solution 함수를 완성해주세요.

// 제한사항
// 3 ≤ k ≤ 100
// 7 ≤ score의 길이 ≤ 1,000
// 0 ≤ score[i] ≤ 2,000
// 입출력 예
// k	score	result
// 3	[10, 100, 20, 150, 1, 100, 200]	[10, 10, 10, 20, 20, 100, 100]
// 4	[0, 300, 40, 300, 20, 70, 150, 50, 500, 1000]	[0, 0, 0, 0, 20, 40, 70, 70, 150, 300]
// 입출력 예 설명
// 입출력 예 #1

// 문제의 예시와 같습니다.

package main

import (
	"sort"
)

func solution(k int, score []int) []int {
	// 명예의전당 배열을 만든다.
	// 정답 배열을 만든다.
	// score를 순회를 돈다.
	// 명예의전당 배열에 v 값을 넣는다.
	// score의 순회를 돈 요소를 명예의전당 배열에 넣고 [:i+1] 배열만큼 반환받는다.
	// 이후 k 미만일 때는 m[:i+1] 배열을 내림차순 후 반환받고 m[i] 원소를 answer 배열에 넣는다.
	// k 이상일 때는 m[:i+1]  배열을 내림차순 정렬한 뒤  m[k-1]번째 값을 answer 배열에 넣는다.
	// answer 배열을 반환한다.
	m := []int{}
	answer := []int{}
	for i, v := range score {
		m = append(m, v)
		// i가 k 미만일 때
		if i+1 < k {
			m = m[:i+1]
			sort.Sort(sort.Reverse(sort.IntSlice(m)))
			answer = append(answer, m[i])
		}

		// i가 k 이상일 때
		if i+1 >= k {
			m = m[:i+1]
			sort.Sort(sort.Reverse(sort.IntSlice(m)))
			answer = append(answer, m[k-1])
		}
	}
	return answer
}

func main() {
	// score := []int{10, 100, 20, 150, 1, 100, 200}
	// k := 3
	score := []int{0, 300, 40, 300, 20, 70, 150, 50, 500, 1000}
	k := 4
	solution(k, score)
}
